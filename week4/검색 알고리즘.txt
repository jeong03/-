## 3-1 ##
from typing import Any, Sequence
def seq_search(a:Sequence, key:Any)->int:
    i=0
    while True:
        if i==len(a):
            return -1
        if a[i]==key:
            return i
        i+=1
if __name__=='__main__':
    num=int(input('원소 수 입력 : '))
    x=[None]*num

    for i in range(num):
        x[i]=int(input(f'x[{i}]: '))

    ky=int(input('검색할 값을 입력 : '))

    idx=seq_search(x,ky)
    if idx==-1:
        print('검색값을 갖는 원소가 존재하지 않음')
    else:
        print(f'검색값은 x[{idx}]에 있음')

## 3-2 ##
from typing import Any, Sequence
def seq_search(a:Sequence, key:Any)->int:
    for i in range(len(a)):
        if a[i]==key:
            return i
        return -1
if __name__=='__main__':
    num=int(input('원소 수 입력 : '))
    x=[None]*num

    for i in range(num):
        x[i]=int(input(f'x[{i}]: '))

    ky=int(input('검색할 값을 입력 : '))

    idx=seq_search(x,ky)
    if idx==-1:
        print('검색값을 갖는 원소가 존재하지 않음')
    else:
        print(f'검색값은 x[{idx}]에 있음')

## 3-3 ##
from typing import Any, Sequence
import copy
def seq_search(seq: Sequence, key:Any)->int:
    a=copy.deepcopy(seq)
    a.append(key)
    i=0
    while True:
        if a[i]==key:
            break
        i+=1
    return -1 if i ==len(seq) else i

## 3-4 ##
from typing import Any, Sequence
def bin_search(a:Sequence, key:Any)->int:
    pl=0
    pr=len(a)-1
    while True:
        pc=(pl+pr)//2
        if a[pc]==key:
            return pc
        elif a[pc]<key:
            pl=pc+1
        else:
            pr=pc-1
        if pl>pr:
            break
    return -1
if __name__=='__main__':
    num=int(input('원소 수 입력 : '))
    x=[None]*num
    print('배열 데이터를 오름차순으로 입력 : ')
    x[0]=int(input('x[0]: '))
    for i in range(1,num):
        while True:
            x[i]=int(input(f'x[{i}]: '))
            if x[i]>=x[i-1]:
                break
    ky=int(input('검색할 값 입력 : '))
    idx=bin_search(x, ky)
    if idx==-1:
        print('검색값을 갖는 원소가 존재하지 않음')
    else:
        print(f'검색값은 x[{idx}]에 있음')

## 3-5 ##
from __future__ import annotations
from typing import Any, Type
import hashlib
class Node:
    def __init__(self, key: Any, value:Any, next:Node)->None:
        self.key=key
        self.value=value
        self.next=next

class ChainedHash:
    def __init__(self, capacity: int)->None:
        self.capacity=capacity
        self.table=[None]*self.capacity

    def hash_value(self, key:Any)->int:
        if isinstance(key, int):
            return key%self.capacity
        return(int(hashlib.sha256(str(key).encode()).hexdigest(), 16) % self.capacity)
    def search(self, key:Any)->Any:
        hash=self.hash_value(key)
        p=self.table[hash]
        while p is not None:
            if p.key==key:
                return p.value
            p=p.next
        return None
    def add(self, key:Any, value:Any)->bool:
        hash=self.hash_value(key)
        p=self.table[hash]
        while p is not None:
            if p.key==key:
                return False
            p=p.next
        temp=Node(key, value, self.table[hash])
        self.table[hash]=temp
        return True
    def remove(self, key: Any)->bool:
        hash=self.hash_value(key)
        p=self.table[hash]
        pp=None
        while p is not None:
            if p.key==key:
                if pp is None:
                    self.table[hash]=p.next
                else:
                    pp.next=p.next
                return True
            pp=p
            p=p.next
        return False
    def dump(self)->None:
        for i in range(self.capacity):
            p=self.table[i]
            print(i, end='')
            while p is not None:
                print(f' -> {p.key} ({p.value})', end='')
                p=p.next
            print()

## 3-6 ##
from enum import Enum
from chained_hash import ChainedHash
Menu=Enum('Menu', ['추가', '삭제', '검색', '덤프', '종료'])
def select_menu()->Menu:
    s=[f'({m.value}){m.name}' for m in Menu]
    while True:
        print(*s, sep='  ', end='')
        n=int(input(': '))
        if 1<=n<=len(Menu):
            return Menu(n)
hash = ChainedHash(13)
while True:
    menu=select_menu()
    if menu==Menu.추가:
        key=int(input('추가할 키를 입력 : '))
        val=input('추가할 값 입력 : ')
        if not hash.add(key, val):
            print('추가를 실패')
    elif menu==Menu.삭제:
        key=int(input('삭제할 키 입력 : '))
        if not hash.remove(key):
            print('삭제 실패')
    elif menu==Menu.검색:
        key=int(input('검색할 키 입력 : '))
        t=hash.search(key)
        if t is not None:
            print(f'검색한 키 입력 : ')
        else:
            print('검색할 데이터가 없음')
    elif menu==Menu.덤프:
        hash.dump()
    else:
        break







